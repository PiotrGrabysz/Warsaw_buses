import argparse
import sys
from pathlib import Path

from Warsaw_buses.collect_data.collect_timetables import timetables_collect_all


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--dir_to_save", "-d", type=str,
                        help="A directory where all the timetables are stored in.")
    parser.add_argument("--verbose", "-v", action="store_true",
                        help="Prints the name of each stop it is processing.")
    parser.add_argument("--repeat_rows_file", "-r", type=str, default=None,
                        help="The file informing which rows from stops_coord should be downloaded. For this version of "
                             "the package please use the 'dir_to_save/errors_log.txt' file generated by "
                             "collect_timetables. Defaults to None, which means that every stop is processed.")
    parser.add_argument("--resume_from_row", "-r_row", type=int, default=0,
                        help="If the downloading broke after some row, you can resume downloading from this row. "
                             "Defaults to 0.")

    args = parser.parse_args()

    # Check if the given path exists and if it doesn't, a new directory is created.
    # If the path already exists, the user is asked if he wants to use this directory or close the program
    try:
        Path(args.dir_to_save).mkdir(parents=True, exist_ok=False)
    except FileExistsError:
        print("This directory already exist. Do you want to proceed (you risk overwriting some files)?")
        user_ans = input("y : n")
        if user_ans == "y":
            Path(args.dir_to_save).mkdir(parents=True, exist_ok=True)
        else:
            sys.exit("Closing the program")

    timetables_collect_all(dir_to_save=args.dir_to_save,
                           verbose=args.verbose,
                           repeat_rows_file=args.repeat_rows_file,
                           resume_from_row=args.resume_from_row)


if __name__ == "__main__":
    main()